// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Conversation {
  id          String    @id @default(cuid())
  archived    Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  folderId    String?   @map(name: "folder_id")
  name        String
  prompt      String
  temperature Int
  userId      String    @map(name: "user_id")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  messages    Message[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  archived       Boolean      @default(false)
  createdAt      DateTime     @default(now()) @map(name: "created_at")
  content        String
  conversationId String
  role           String
  userId         String       @map(name: "user_id")
  updatedAt      DateTime     @updatedAt @map(name: "updated_at")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Prompt {
  id          String   @id @default(cuid())
  archived    Boolean  @default(false)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  content     String
  description String
  folderId    String?  @map(name: "folder_id")
  name        String
  userId      String   @map(name: "user_id")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("prompts")
}

model User {
  id            String         @id @default(cuid())
  archived      Boolean        @default(false)
  createdAt     DateTime       @default(now()) @map(name: "created_at")
  email         String         @unique
  password      String
  updatedAt     DateTime       @updatedAt @map(name: "updated_at")
  conversations Conversation[]
  messages      Message[]
  prompts       Prompt[]

  @@map("users")
}
